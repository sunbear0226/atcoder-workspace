#!/usr/bin/env python3
import sys
import itertools


def solve(N: int, M: int, Q: int, a: "List[int]", b: "List[int]", c: "List[int]", d: "List[int]"):
    # dict = {}
    # for i in range(Q):
    #     if not c[i] in dict:
    #         dict[c[i]] = 0
    #     dict[c[i]] += d[i]
    # m = 0
    # C = -1
    # for i in dict.items():
    #     m = max(m, i[1])
    # for i in dict.items():
    #     if i[1] == m:
    #         C = i[0]
    # s = 0
    # for i in range(1, M + 1):
    #     for j in range(1, M + 1):
    #         for k in range(Q):
    #             if j - i == C or i - j == C:
    #                 if i == a[k] and j == b[k]:
    #                     s += d[k]
    # print(s)
    ts = itertools.combinations_with_replacement(range(1, M + 1), N)
    m = 0
    for t in ts:
        s = 0
        for i in range(Q):
            if t[b[i] - 1] - t[a[i] - 1] == c[i]:
                s += d[i]
        m = max(m, s)
    print(m)
    return


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    Q = int(next(tokens))  # type: int
    a = [int()] * (Q)  # type: "List[int]"
    b = [int()] * (Q)  # type: "List[int]"
    c = [int()] * (Q)  # type: "List[int]"
    d = [int()] * (Q)  # type: "List[int]"
    for i in range(Q):
        a[i] = int(next(tokens))
        b[i] = int(next(tokens))
        c[i] = int(next(tokens))
        d[i] = int(next(tokens))
    solve(N, M, Q, a, b, c, d)

if __name__ == '__main__':
    main()
