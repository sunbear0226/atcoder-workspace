#!/usr/bin/env python3
import sys
import collections


def solve(N: int, a: "List[int]", b: "List[int]"):
    print('start')
    ca = collections.Counter(a)
    cb = collections.Counter(b)
    K = 0
    for i in ca.keys():
        K = max(K, ca[i] + cb[i])
    print(K)
    print(1)
    c = 1
    for i in range(1, N-1):
        cnt = 0
        # if c in l[a[i - 1]] or c in l[b[i-1]]:
        #     print(c+1 if c == 1)

        # for j in [a[i-1], b[i-1]]:
        #     if j not in [a[i], b[i]]:
        #         cnt += 1
        if cnt == 2:
            print(1)
            c = 1
            continue
        c += 1
        print(c)
    return


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    a = [int()] * (N - 1)  # type: "List[int]"
    b = [int()] * (N - 1)  # type: "List[int]"
    for i in range(N - 1):
        a[i] = int(next(tokens))
        b[i] = int(next(tokens))
    solve(N, a, b)

if __name__ == '__main__':
    main()
