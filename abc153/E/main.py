#!/usr/bin/env python3
import sys
import copy

all_arr = []


def solve(H: int, N: int, A: "List[int]", B: "List[int]"):
    arr = [[A[i], B[i], A[i] / B[i]] for i in range(N)]
    global all_arr
    all_arr = copy.deepcopy(arr)
    cost = 0
    print(f(H, sorted(arr, key=lambda x: x[2], reverse=True), cost))
    return


def f(H, arr, cost):
    cpmax = arr[0]
    count = H // cpmax[0]
    H -= count * cpmax[0]
    new_cost = count * cpmax[1]
    if len(arr) == 1:
        return cost + get_onepan(H)[1]
    return f(H, arr[1:len(arr)], cost + new_cost) if H > 0 else cost + new_cost


def get_onepan(H):
    global all_arr
    onepans = list(filter(lambda x: x[0] >= H, all_arr))
    return min(onepans, key=lambda x: x[1]) if onepans else None


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    N = int(next(tokens))  # type: int
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(H, N, A, B)

if __name__ == '__main__':
    main()
