#!/usr/bin/env python3
import sys


def solve(N: int, M: int, s: "List[int]", c: "List[int]"):
    ans = [0] * N
    if N != 1:
        ans[0] = 1
    check = [10] * N
    for i in range(M):
        d = s[i] - 1
        if (check[d] != 10 and ans[d] != c[i]):
            print(-1)
            return
        if (d == 0 and c[i] == 0 and N != 1):
            print(-1)
            return
        ans[d] = c[i]
        check[d] = c[i]
    if N != 1 and ans[0] == 0:
        print(-1)
        return
    print(''.join([str(i) for i in ans]))
    return


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    s = [int()] * (M)  # type: "List[int]"
    c = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        s[i] = int(next(tokens))
        c[i] = int(next(tokens))
    solve(N, M, s, c)

if __name__ == '__main__':
    main()
