#!/usr/bin/env python3
import sys
from collections import deque


def solve(K: int):
    G = []
    m = {
        '0': [0, 1],
        '1': [0, 1, 2],
        '2': [1, 2, 3],
        '3': [2, 3, 4],
        '4': [3, 4, 5],
        '5': [4, 5, 6],
        '6': [5, 6, 7],
        '7': [6, 7, 8],
        '8': [7, 8, 9],
        '9': [8, 9],
    }
    q = deque([])
    for i in list(range(1, 10)):
        q.appendleft(i)
    while(len(G) <= 100000):
        v = str(q.pop())
        G.append(v)
        for nv in m[v[-1]]:
            q.appendleft(v + str(nv)) 
    print(G[K-1])
    return


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    K = int(next(tokens))  # type: int
    solve(K)

if __name__ == '__main__':
    main()
